{"version":3,"sources":["components/HomeComponent.js","components/AboutComponent.js","components/ProjectComponent.js","components/ContactComponent.js","components/HeaderComponent.js","components/MainComponent.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","className","to","target","download","Button","outline","color","About","Project","Component","Contact","Header","state","isNavOpen","toggleNav","bind","this","setState","Fragment","Navbar","expand","NavbarToggler","onClick","NavbarBrand","href","src","height","width","alt","Collapse","isOpen","navbar","Nav","NavItem","Main","exact","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2SAeeA,MAXf,SAAcC,GAEV,OACI,yBAAKC,UAAU,aACX,kBAAC,IAAD,CAAMC,GAAG,4BAA4BC,OAAO,SAASC,UAAQ,GACzD,kBAACC,EAAA,EAAD,CAAQC,SAAO,EAACC,MAAM,WAAtB,aCADC,MAPf,SAAeR,GAEX,OACI,+BCMOS,E,uKANP,OACI,kC,GAJUC,aCSPC,E,uKANP,OACI,kC,GAJUD,a,wDC0DPE,E,kDAtDX,WAAYZ,GAAQ,IAAD,8BACf,cAAMA,IAEDa,MAAQ,CACTC,WAAW,GAGf,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBAPF,E,wDAWfC,KAAKC,SAAS,CAAEJ,WAAYG,KAAKJ,MAAMC,c,+BAIvC,OACI,kBAAC,IAAMK,SAAP,KACI,kBAACC,EAAA,EAAD,CAAQC,OAAO,MACX,yBAAKpB,UAAU,aACX,kBAACqB,EAAA,EAAD,CAAeC,QAASN,KAAKF,YAC7B,kBAACS,EAAA,EAAD,CAAavB,UAAU,UAAUwB,KAAK,KAClC,yBAAKC,IAAI,4BAA4BC,OAAO,MAAMC,MAAM,MAAMC,IAAI,4BAEtE,kBAACC,EAAA,EAAD,CAAUC,OAAQd,KAAKJ,MAAMC,UAAWkB,QAAM,GAC1C,kBAACC,EAAA,EAAD,CAAKD,QAAM,GACP,kBAACE,EAAA,EAAD,KACI,kBAAC,IAAD,CAASjC,UAAU,WAAWC,GAAG,KAC7B,0BAAMD,UAAU,qBADpB,UAIJ,kBAACiC,EAAA,EAAD,KACI,kBAAC,IAAD,CAASjC,UAAU,WAAWC,GAAG,UAC7B,0BAAMD,UAAU,qBADpB,cAIJ,kBAACiC,EAAA,EAAD,KACI,kBAAC,IAAD,CAASjC,UAAU,WAAWC,GAAG,aAC7B,0BAAMD,UAAU,qBADpB,cAIJ,kBAACiC,EAAA,EAAD,KACI,kBAAC,IAAD,CAASjC,UAAU,WAAWC,GAAG,YAC7B,0BAAMD,UAAU,6BADpB,yB,GA3CfS,a,OCsBNyB,E,uKAfP,OACI,6BACI,kBAAC,EAAD,MACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWvC,IACjC,kBAAC,IAAD,CAAOsC,KAAK,SAASC,UAAW9B,IAChC,kBAAC,IAAD,CAAO6B,KAAK,YAAYC,UAAW7B,IACnC,kBAAC,IAAD,CAAO4B,KAAK,WAAWC,UAAW3B,IAClC,kBAAC,IAAD,CAAUT,GAAG,Y,GAXdQ,aCUJ6B,G,6KAVX,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,EAAD,Y,GANQ7B,cCOE8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f2ea3c02.chunk.js","sourcesContent":["import React from 'react';\nimport { Button } from 'reactstrap';\nimport { Link } from 'react-router-dom';\n\nfunction Home(props) {\n\n    return (\n        <div className=\"container\">\n            <Link to=\"files/CindyPhamResume.pdf\" target=\"_blank\" download>\n                <Button outline color=\"primary\">Resume</Button>\n            </Link>\n        </div>\n    );\n}\n\nexport default Home;","import React from 'react';\n\nfunction About(props) {\n\n    return (\n        <div></div>\n    );\n}\n\nexport default About;","import React, { Component } from 'react';\n\nclass Project extends Component {\n\n    render() {\n        return (\n            <div></div>\n        );\n    }\n}\n\nexport default Project;","import React, { Component } from 'react';\n\nclass Contact extends Component {\n\n    render() {\n        return (\n            <div></div>\n        );\n    }\n}\n\nexport default Contact;","import React, { Component } from 'react';\nimport { Navbar, NavbarBrand, Nav, NavbarToggler, Collapse, NavItem } from 'reactstrap';\nimport { NavLink } from 'react-router-dom';\n\nclass Header extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isNavOpen: false\n        }\n\n        this.toggleNav = this.toggleNav.bind(this);\n    }\n\n    toggleNav() {\n        this.setState({ isNavOpen: !this.state.isNavOpen });\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <Navbar expand=\"md\">\n                    <div className=\"container\">\n                        <NavbarToggler onClick={this.toggleNav} />\n                        <NavbarBrand className=\"mr-auto\" href=\"/\">\n                            <img src=\"images/inphamous_logo.png\" height=\"100\" width=\"180\" alt=\"inPHAMous Technologies\" />\n                        </NavbarBrand>\n                        <Collapse isOpen={this.state.isNavOpen} navbar>\n                            <Nav navbar>\n                                <NavItem>\n                                    <NavLink className=\"nav-link\" to=\"/\">\n                                        <span className=\"fa fa-home fa-lg\"></span> Home\n                                    </NavLink>\n                                </NavItem>\n                                <NavItem>\n                                    <NavLink className=\"nav-link\" to=\"/about\">\n                                        <span className=\"fa fa-info fa-lg\"></span> About Me\n                                    </NavLink>\n                                </NavItem>\n                                <NavItem>\n                                    <NavLink className=\"nav-link\" to=\"/projects\">\n                                        <span className=\"fa fa-list fa-lg\"></span> Projects\n                                    </NavLink>\n                                </NavItem>\n                                <NavItem>\n                                    <NavLink className=\"nav-link\" to=\"/contact\">\n                                        <span className=\"fa fa-address-card fa-lg\"></span> Contact Me\n                                    </NavLink>\n                                </NavItem>\n                            </Nav>\n                        </Collapse>\n                    </div>\n                </Navbar>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport Home from './HomeComponent';\nimport About from './AboutComponent';\nimport Project from './ProjectComponent';\nimport Contact from './ContactComponent';\nimport Header from './HeaderComponent';\nimport { Switch, Route, Redirect } from 'react-router-dom';\n\nclass Main extends Component {\n\n    render() {\n        return (\n            <div>\n                <Header />\n                <Switch>\n                    <Route exact path=\"/\" component={Home} />\n                    <Route path=\"/about\" component={About} />\n                    <Route path=\"/projects\" component={Project} />\n                    <Route path=\"/contact\" component={Contact} />\n                    <Redirect to=\"/\" />\n                </Switch>\n            </div>\n        );\n    }\n}\n\nexport default Main;","import React, { Component } from 'react';\nimport Main from './components/MainComponent';\nimport './App.css';\nimport { BrowserRouter } from 'react-router-dom';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <BrowserRouter>\n        <div>\n          <Main />\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.css';\nimport 'bootstrap-social/bootstrap-social.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}